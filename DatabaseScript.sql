DROP TABLE IF EXISTS USERS;
CREATE TABLE USER
(
	UFID INT NOT NULL,
	USER_NAME VARCHAR(100) NOT NULL ,
	PRIMARY KEY ( UFID )
);

DROP TABLE IF EXISTS COURSE;
CREATE TABLE COURSE
(
	COURSE_ID INT NOT NULL AUTO_INCREMENT,
	COURSE_NAME VARCHAR(100) NOT NULL ,
	PRIMARY KEY ( COURSE_ID )
);

DROP TABLE IF EXISTS LIBRARY;
CREATE TABLE LIBRARY
(
	LIBRARY_ID INT NOT NULL AUTO_INCREMENT,
	LIBRARY_NAME VARCHAR(100) NOT NULL ,
	PRIMARY KEY ( LIBRARY_ID )
);

DROP TABLE IF EXISTS ROOM;
CREATE TABLE ROOM
(
	ROOM_ID INT NOT NULL AUTO_INCREMENT,
	ROOM_NAME VARCHAR(100) NOT NULL ,
	LIBRARY_ID INT NOT NULL, 
	PRIMARY KEY ( ROOM_ID ),
	CONSTRAINT fk_LibRoom FOREIGN KEY ( LIBRARY_ID ) 
	REFERENCES Libraries( LIBRARY_ID )
);

DROP TABLE IF EXISTS USER_COURSE;
CREATE TABLE USER_COURSE
(
	UFID INT,
	COURSE_ID INT,
	PRIMARY KEY ( UFID, COURSE_ID ),
	CONSTRAINT fk_User FOREIGN KEY ( UFID ) REFERENCES USER( UFID ),
	CONSTRAINT fk_Course FOREIGN KEY ( COURSE_ID ) REFERENCES COURSE(COURSE_ID)
);

DROP TABLE IF EXISTS FRIENDSHIP;
CREATE TABLE FRIENDSHIP
(
	USER_1 INT ,
	USER_2 INT ,
	PRIMARY KEY ( USER_1, USER_2 ),
	CONSTRAINT fk_User1 FOREIGN KEY (USER_1) REFERENCES USER(UFID),
	CONSTRAINT fk_User2 FOREIGN KEY (USER_2) REFERENCES USER(UFID)
);
